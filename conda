#!/usr/bin/env python3


import contextlib
import json
import locale
import os
import subprocess
import sys
import traceback
from functools import lru_cache
from pathlib import Path

ENABLE_LOGGING = True

# assuming __file__ is .pixi/envs/<env>/libexec/conda
# or .pixi\envs\<env>\libexec\conda.bat\..\conda.py
PIXI_ENVIRONMENT_FILE = Path(__file__).resolve().parent.parent / "conda-meta" / "pixi"


def pixi(cmd):
    out = subprocess.check_output(["pixi", *cmd])
    return out.decode(locale.getpreferredencoding())


@lru_cache
def manifest_path():
    if PIXI_ENVIRONMENT_FILE.exists():
        with PIXI_ENVIRONMENT_FILE.open(encoding="utf8") as f:
            return Path(json.load(f)["manifest_path"])

    # pixi < 0.24.0
    project_root = Path(__file__).resolve().parent.parent.parent.parent.parent
    manifest_path = project_root / "pixi.toml"
    if manifest_path.exists():
        return manifest_path
    manifest_path = project_root / "pyproject.toml"
    if manifest_path.exists() and manifest_path.read_text(encoding="utf8").find("[tool.pixi") != -1:
        return manifest_path
    msg = "Manifest file not found."
    raise FileNotFoundError(msg)


def pixi_root():
    return manifest_path().parent / ".pixi"


def std_pixi_args():
    return ["-q", "--no-progress", "--manifest-path", str(manifest_path())]


def pixi_json(cmd):
    return json.loads(pixi([*cmd, "--json"]))


def pixi_envs():
    platform = pixi_json(["info", *std_pixi_args()])["platform"]
    envs = pixi_json(["info", *std_pixi_args()])["environments_info"]
    return [env["prefix"] for env in envs if platform in env["platforms"]]


def print_json(data):
    print(json.dumps(data, indent=4))


def prefix_to_env(prefix):
    return Path(prefix).name


def pixi_env_cli_params(env):
    return ["-e", env] if env != "default" else []


def conda_info_envs_json():
    print_json(
        {
            "envs_dirs": [str(pixi_root() / "envs")],
            "conda_prefix": str(pixi_root() / "envs"),
            "envs": pixi_envs(),
        },
    )


def conda_list(args):
    assert args[1] == "-p" or args[1] == "-n"
    env = prefix_to_env(args[2]) if args[1] == "-p" else args[2]
    assert len(args) == 3 or len(args) == 4  # noqa: PLR2004
    out = pixi_json(["list", *std_pixi_args(), *pixi_env_cli_params(env)])
    if len(args) == 3:  # noqa: PLR2004
        lines = ("{name} {version} {build}".format(**pkg) for pkg in out)
    else:
        # observed in PyCharm 2024.1 for Windows
        assert args[3] == "-e"
        lines = ("{name}={version}={build}".format(**pkg) for pkg in out)
    print("\n".join(lines))


def conda_run(args):
    assert args[1] == "-p" or args[1] == "-n"
    env = prefix_to_env(args[2]) if args[1] == "-p" else args[2]

    if os.name == "nt":
        # https://bugs.python.org/issue20451
        pixi_run_args = [f'"{arg}"' for arg in args[3:] if arg != "--no-capture-output"]
    else:
        pixi_run_args = [arg for arg in args[3:] if arg != "--no-capture-output"]
    os.execlp(
        "pixi",
        "pixi",
        "run",
        *std_pixi_args(),
        *pixi_env_cli_params(env),
        *pixi_run_args,
    )


def main(args):
    if args == ["self-check"]:
        try:
            pixi(["--version"])
        except (FileNotFoundError, subprocess.CalledProcessError):
            print("'pixi' not found, is it on the $PATH?", file=sys.stderr)
            return 1
        pixi(["info", *std_pixi_args()])
        if not manifest_path().exists():
            print(
                f"pixi manifest path {manifest_path()!s} does not exist.",
                file=sys.stderr,
            )
            return 1
        if not pixi_root().exists():
            print(
                f"pixi root {pixi_root()!s} does not exist.",
                file=sys.stderr,
            )
            return 1
        print("Self-check successful.", file=sys.stderr)
    elif args == ["info", "--envs", "--json"]:
        conda_info_envs_json()
    elif args[0] == "list":
        conda_list(args)
    elif args[0] == "run":
        conda_run(args)
    elif args[0] == "activate":
        msg = f"{args!s}\n`conda activate` not implemented. PyCharm will fallback to `conda run`."
        raise NotImplementedError(msg)
    else:
        raise NotImplementedError(str(args))

    return 0


if __name__ == "__main__":
    args = sys.argv[1:]

    if ENABLE_LOGGING:
        cache_home = Path(os.getenv("XDG_CACHE_HOME") or "~/.cache").expanduser()
        with contextlib.suppress(OSError):
            Path.mkdir(cache_home, parents=True)
        logfile = cache_home / "pixi-pycharm.log"
        with Path.open(logfile, "a") as f:
            f.write("Attempting to run: " + str(args) + "\n")

    try:
        sys.exit(main(args))
    except Exception:
        if ENABLE_LOGGING:
            with Path.open(logfile, "a") as f:
                f.write(traceback.format_exc())
        raise
