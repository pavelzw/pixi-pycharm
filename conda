#!/usr/bin/env python3


import contextlib
import json
import locale
import os
import subprocess
import sys
import traceback
from pathlib import Path

ENABLE_LOGGING = True

# assuming file is in .pixi/envs/<env>/libexec/conda
PIXI_ROOT = Path(__file__).parent.parent.parent.parent
PROJECT_ROOT = PIXI_ROOT.parent
MANIFEST_PATH = PROJECT_ROOT / "pixi.toml"


def pixi(cmd):
    out = subprocess.check_output(["pixi", *cmd])
    return out.decode(locale.getpreferredencoding())


def manifest():
    return ["--manifest-path", str(MANIFEST_PATH)]


def pixi_json(cmd):
    return json.loads(pixi([*cmd, "--json"]))


def pixi_envs():
    platform = pixi_json(["info", *manifest()])["platform"]
    envs = pixi_json(["info", *manifest()])["environments_info"]
    return [env["prefix"] for env in envs if platform in env["platforms"]]


def print_json(data):
    print(json.dumps(data, indent=4))


def prefix_to_env(prefix):
    return prefix.split("/")[-1]


def pixi_env_cli_params(env):
    return ["-e", env] if env != "default" else []


def main(args):
    if args == ["self-check"]:
        try:
            pixi(["--version"])
        except (FileNotFoundError, subprocess.CalledProcessError):
            print("'pixi' not found, is it on the $PATH?", file=sys.stderr)
            return 1
        pixi(["info", *manifest()])
        if not str(PIXI_ROOT).endswith(".pixi"):
            msg = (
                f"PIXI_ROOT={PIXI_ROOT!s} does not end with '.pixi'."
                "Is it in the correct location?"
            )
            raise AssertionError(msg)
        print("Self-check successful.", file=sys.stderr)
    elif args == ["info", "--envs", "--json"]:
        print_json(
            {
                "envs_dirs": [str(PIXI_ROOT / "envs")],
                "conda_prefix": str(PIXI_ROOT / "envs"),
                "envs": pixi_envs(),
            },
        )
    elif args[0] == "list":
        assert args[1] == "-p" or args[1] == "-n"
        env = prefix_to_env(args[2]) if args[1] == "-p" else args[2]
        assert len(args) == 3  # noqa: PLR2004
        out = pixi_json(["list", *manifest(), *pixi_env_cli_params(env)])
        lines = ("{name} {version} {build}".format(**pkg) for pkg in out)
        print("\n".join(lines))
    elif args[0] == "run":
        assert args[1] == "-p" or args[1] == "-n"
        env = prefix_to_env(args[2]) if args[1] == "-p" else args[2]
        pixi_run_args = [arg for arg in args[3:] if arg != "--no-capture-output"]
        os.execlp(
            "pixi",
            "pixi",
            "run",
            *manifest(),
            *pixi_env_cli_params(env),
            *pixi_run_args,
        )
    else:
        raise NotImplementedError(str(args))

    return 0


if __name__ == "__main__":
    args = sys.argv[1:]

    if ENABLE_LOGGING:
        cache_home = Path(os.getenv("XDG_CACHE_HOME") or "~/.cache").expanduser()
        with contextlib.suppress(OSError):
            Path.mkdir(cache_home, parents=True)
        logfile = cache_home / "pixi-pycharm.log"
        with Path.open(logfile, "a") as f:
            f.write("Attempting to run: " + str(args) + "\n")

    try:
        sys.exit(main(args))
    except Exception:
        if ENABLE_LOGGING:
            with Path.open(logfile, "a") as f:
                f.write(traceback.format_exc())
        raise
